version: '3.8'

services:
  # https://github.com/traefik/traefik
  traefik:
    image: traefik:2.10
    profiles: [ traefik ]
    container_name: traefik
    command:
      # Dashboard enabled
      - --api.insecure=true
      - --api.dashboard=true

      # Включает прослушивание докера на новые события и следит за лейблами контейнеров.
      - --providers.docker=true
      # Отключает автоматическое создание роутеров ко всем контейнерам на сервере.
      - --providers.docker.exposedByDefault=false
      # Сеть докера, по которой будет выполнятся подключение к контейнерам.
      - --providers.docker.network=traefik
      # Папка с конфигурационным файлом.
      - --providers.file.directory=/etc/traefik/dynamic
      # Включает отслеживание изменений файла конфигурации.
      - --providers.file.watch=true
      # Создаёт entrypoint с названием http и слушает 80 порт.
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=webSecure
      - --entryPoints.web.http.redirections.entrypoint.scheme=https
      # Создаёт entrypoint с названием https и слушает 443 порт.
      - --entrypoints.webSecure.address=:443
      - --entrypoints.webSecure.http.tls.certResolver=letsencryptResolver

      - --certificatesResolvers.letsencryptResolver.acme.tlsChallenge=true
      #- --certificatesResolvers.letsencryptResolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.letsencryptResolver.acme.email=${LETSENCRYPT_DEFAULT_EMAIL:-admin@example.com}
      - --certificatesResolvers.letsencryptResolver.acme.storage=/etc/traefik/letsencrypt/acme.json
      # Создаёт entrypoint и слушает 443/udp порт.
      - --entrypoints.udpSecure.address=:443/udp
      # debug mode
      - --log.level=DEBUG
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefikDashboard.rule=Host(`${TRAEFIK_HOST:-traefik.localhost}`)
      - traefik.http.routers.traefikDashboard.service=api@internal
      - traefik.http.routers.traefikDashboard.middlewares=traefikAuth@file
    ports: [ "80:80", "443:443" ]
    volumes:
      - ./traefik/dynamic:/etc/traefik/dynamic
      - ./traefik/htpasswd:/etc/traefik/htpasswd
      - ./traefik/letsencrypt:/etc/traefik/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [ traefik ]
    restart: unless-stopped

  # https://hub.docker.com/_/adminer
  adminer:
    image: adminer
    profiles: [ adminer ]
    container_name: adminer
    labels:
      - traefik.enable=true
      # adminer-web - роутер для http
      - traefik.http.routers.adminer-web.entrypoints=web
      - traefik.http.routers.adminer-web.rule=Host(`${ADMINER_HOST:-adminer.localhost}`)
      - traefik.http.routers.adminer-web.middlewares=permanentToHttps@file
      # adminer-webSecure - роутер для https
      - traefik.http.routers.adminer-webSecure.entrypoints=webSecure
      - traefik.http.routers.adminer-webSecure.rule=Host(`${ADMINER_HOST:-adminer.localhost}`)
      - traefik.http.routers.adminer-webSecure.tls=true
      - traefik.http.routers.adminer-webSecure.tls.certResolver=letsencryptResolver
      - traefik.http.routers.adminer-webSecure.middlewares=adminerAuth
      - traefik.http.middlewares.adminerAuth.basicAuth.usersFile=/etc/traefik/htpasswd/${ADMINER_HOST:-adminer.localhost}
    volumes:
      - ./adminer/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    networks: [ traefik, databases ]
    restart: unless-stopped

  # https://hub.docker.com/r/schickling/mailcatcher
  mailcatcher:
    image: schickling/mailcatcher
    profiles: [ mailcatcher ]
    container_name: mailcatcher
    labels:
      - traefik.enable=true
      # mailcatcher-web - роутер для http
      - traefik.http.routers.mailcatcher-web.entrypoints=web
      - traefik.http.routers.mailcatcher-web.rule=Host(`${MAILCATCHER_HOST:-mailcatcher.localhost}`)
      - traefik.http.routers.mailcatcher-web.middlewares=permanentToHttps@file
      # mailcatcher-webSecure - роутер для https
      - traefik.http.routers.mailcatcher-webSecure.entrypoints=webSecure
      - traefik.http.routers.mailcatcher-webSecure.rule=Host(`${MAILCATCHER_HOST:-mailcatcher.localhost}`)
      - traefik.http.routers.mailcatcher-webSecure.tls=true
      - traefik.http.routers.mailcatcher-webSecure.tls.certResolver=letsencryptResolver
      - traefik.http.routers.mailcatcher-webSecure.service=mailcatcherService
      - traefik.http.services.mailcatcherService.loadBalancer.server.port=1080
      # redirect to https middleware
    networks: [ traefik, tools ]

  # https://hub.docker.com/r/minio/minio
  minio:
    image: minio/minio
    profiles: [ minio ]
    container_name: minio
    command: server /minio --console-address=:9001
    labels:
      - traefik.enable=true
      # minio-console-web - редирект на https
      - traefik.http.routers.minio-console-web.entrypoints=web
      - traefik.http.routers.minio-console-web.rule=Host(`${MINIO_CONSOLE_HOST:-minio-console.localhost}`)
      - traefik.http.routers.minio-console-web.middlewares=permanentToHttps@file
      - traefik.http.routers.minio-console-web.service=minioConsoleService
      # minio-console - Админ панель minio
      - traefik.http.routers.minio-console.entrypoints=webSecure
      - traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_HOST:-minio-console.localhost}`)
      - traefik.http.routers.minio-console.tls=true
      - traefik.http.routers.minio-console.tls.certResolver=letsencryptResolver
      - traefik.http.routers.minio-console.service=minioConsoleService
      - traefik.http.services.minioConsoleService.loadBalancer.server.port=9001

      # minio-web - редирект на https
      - traefik.http.routers.minio-web.entrypoints=web
      - traefik.http.routers.minio-web.rule=Host(`${MINIO_HOST:-minio.localhost}`)
      - traefik.http.routers.minio-web.middlewares=permanentToHttps@file
      - traefik.http.routers.minio-web.service=minioService
      # minio - s3 api
      - traefik.http.routers.minio.entrypoints=webSecure
      - traefik.http.routers.minio.rule=Host(`${MINIO_HOST:-minio.localhost}`)
      - traefik.http.routers.minio.tls=true
      - traefik.http.routers.minio.tls.certResolver=letsencryptResolver
      - traefik.http.routers.minio.service=minioService
      - traefik.http.services.minioService.loadBalancer.server.port=9000
    volumes:
      - ./minio:/minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_REDIRECT_URL:-http://minio.localhost}
    networks: [ traefik, tools ]
    restart: unless-stopped

  wireguard:
    image: ghcr.io/wg-easy/wg-easy
    profiles: [ wireguard ]
    container_name: wireguard
    labels:
      - traefik.enable=true
      # wg-web - редирект на https
      - traefik.http.routers.wg-web.entrypoints=web
      - traefik.http.routers.wg-web.rule=Host(`${WG_HOST:-wg.localhost}`)
      - traefik.http.routers.wg-web.middlewares=permanentToHttps@file
      - traefik.http.routers.wg-web.service=webService
      # wg-webSecure - роутер для https
      - traefik.http.routers.wg-webSecure.entrypoints=webSecure
      - traefik.http.routers.wg-webSecure.rule=Host(`${WG_HOST:-wg.localhost}`)
      - traefik.http.routers.wg-webSecure.tls=true
      - traefik.http.routers.wg-webSecure.tls.certResolver=letsencryptResolver
      - traefik.http.routers.wg-webSecure.service=webService
      - traefik.http.services.webService.loadBalancer.server.port=51821
      # wg-udp - роутер для проксирования порта 443/udp на 51820/udp
      - traefik.udp.routers.wg-udpSecure.entrypoints=udpSecure
      - traefik.udp.routers.wg-udpSecure.service=udpService
      - traefik.udp.services.udpService.loadbalancer.server.port=51820
    volumes:
      - ./wireguard:/etc/wireguard
    environment:
      - WG_HOST=${WG_HOST:-wg.localhost}
      - WG_PORT=${WG_PORT:-51820}
      - PASSWORD_HASH=${WG_PASSWORD_HASH:-wg.localhost}
    networks: [ traefik ]
    restart: unless-stopped
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1

  ipsec:
    image: hwdsl2/ipsec-vpn-server
    profiles: [ ipsec ]
    container_name: ipsec
    volumes:
      - /lib/modules:/lib/modules:ro
      - ./ipsec:/etc/ipsec.d
    environment:
      - VPN_IPSEC_PSK=${IPSEC_VPN_IPSEC_PSK:-your_ipsec_pre_shared_key}
      - VPN_USER=${IPSEC_VPN_USER:-user}
      - VPN_PASSWORD=${IPSEC_VPN_PASSWORD:-pass}
    restart: unless-stopped
    ports:
      - "500:500/udp"
      - "4500:4500/udp"
    privileged: true


  # https://docs.linuxserver.io/images/docker-code-server
  code:
    image: breakhack/code-server:4.90.2-code
    profiles: [ code ]
    container_name: code
    labels:
      - traefik.enable=true
      # code-web - роутер для http
      - traefik.http.routers.code-web.entrypoints=web
      - traefik.http.routers.code-web.rule=Host(`${CODE_HOST:-code.localhost}`)
      - traefik.http.routers.code-web.middlewares=permanentToHttps@file
      # code-webSecure - роутер для https
      - traefik.http.routers.code-webSecure.entrypoints=webSecure
      - traefik.http.routers.code-webSecure.rule=Host(`${CODE_HOST:-code.localhost}`)
      - traefik.http.routers.code-webSecure.tls=true
      - traefik.http.routers.code-webSecure.tls.certResolver=letsencryptResolver
      - traefik.http.routers.code-webSecure.service=codeService
      - traefik.http.services.codeService.loadBalancer.server.port=8443
      # redirect to https middleware
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - PASSWORD=${CODE_PASSWORD}
      - SUDO_PASSWORD=${CODE_SUDO_PASSWORD}
      #- HASHED_PASSWORD= #optional
      #- SUDO_PASSWORD_HASH= #optional
      #- PROXY_DOMAIN=code-server.my.domain #optional
      #- DEFAULT_WORKSPACE=/config/workspace #optional
    volumes:
      - ./code/config:/config
    networks: [ traefik, databases ]

  # https://hub.docker.com/_/postgres
  postgresql:
    user: ${POSTGRES_CONTAINER_USER:-1000}:${POSTGRES_CONTAINER_USER:-1000}
    image: postgres:${POSTGRES_IMAGE_VERSION:-14}
    profiles: [ postgresql ]
    container_name: postgresql
    volumes:
      - ./postgresql:/var/lib/postgresql/data
    environment:
      - PGDATA=/var/lib/postgresql/data/data
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rootpass}
    networks: [ databases ]
    restart: unless-stopped

  # https://hub.docker.com/_/mysql
  mysql:
    user: ${MYSQL_CONTAINER_USER:-1000}:${MYSQL_CONTAINER_USER:-1000}
    image: mysql:${MYSQL_IMAGE_VERSION:-8}
    profiles: [ mysql ]
    container_name: mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password
    volumes:
      - ./mysql/data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_USER=${MYSQL_USER:-root}
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD:-rootpass}
    networks: [ databases ]
    restart: unless-stopped

  # https://hub.docker.com/_/redis
  redis:
    user: ${REDIS_CONTAINER_USER:-1000}:${REDIS_CONTAINER_USER:-1000}
    image: redis:${REDIS_IMAGE_VERSION:-7}
    profiles: [ redis ]
    container_name: redis
    volumes:
      - ./redis:/data
    networks: [ databases ]
    restart: unless-stopped

  # https://hub.docker.com/r/tarampampam/3proxy
  3proxy:
    image: tarampampam/3proxy:${PROXY_IMAGE_VERSION:-1.9.1}
    profiles: [ 3proxy ]
    container_name: 3proxy
    environment:
      - PROXY_LOGIN=${PROXY_LOGIN}
      - PROXY_PASSWORD=${PROXY_PASSWORD}
    ports: [ "3128:3128/tcp", "1080:1080/tcp" ]
    restart: unless-stopped

  # https://hub.docker.com/r/telegrammessenger/proxy
  mtproto:
    image: telegrammessenger/proxy:${MTPROTO_IMAGE_VERSION:-latest}
    profiles: [ mtproto ]
    container_name: mtproto
    volumes:
      - ./mtproto/run.sh:/run.sh
      - ./mtproto/data:/data
    environment:
      - SECRET_COUNT=${MTPROTO_SECRET_COUNT:-2}
      - PORT=${MTPROTO_PORT:-8443}
      - TAG=${MTPROTO_TAG}
    ports: [ "8443:8443" ]
    network_mode: host
    restart: unless-stopped



networks:
  traefik:
    name: traefik
    external: true
  databases:
    name: databases
    external: true
  tools:
    name: tools
    external: true
